openapi: 3.0.4
info:
  title: "Menu ${VERSION_APP}"
  description: This is a place where visitors choose dishes from the menu
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - url: http://localhost:8080/v1
tags:
  - name: dish
    description: Блюдо из меню
paths:
  /dish/create:
    post:
      tags:
        - dish
      summary: Create dish
      operationId: dishCreate
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DishCreateRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DishCreateResponse'
  /dish/read:
    post:
      tags:
        - dish
      summary: Read dish
      operationId: dishRead
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DishReadRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DishReadResponse'
  /dish/update:
    post:
      tags:
        - dish
      summary: Update dish
      operationId: dishUpdate
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DishUpdateRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DishUpdateResponse'
  /dish/delete:
    post:
      tags:
        - dish
      summary: Delete dish
      operationId: dishDelete
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DishDeleteRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DishDeleteResponse'
  /dish/search:
    post:
      tags:
        - dish
      summary: Search dish
      operationId: dishSearch
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DishSearchRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DishSearchResponse'
  /dish/offers:
    post:
      tags:
        - dish
      summary: Search offers
      operationId: dishOffers
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DishOffersRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DishOffersResponse'
components:
  schemas:

    IRequest:
      type: object
      description: Базовый интерфейс для всех запросов
      properties:
        requestType:
          type: string
          description: Поле-дескриминатор для вычисления типа запроса
          example: create
        requestId:
          type: string
          description: Идентификатор запроса для отладки
      discriminator:
        propertyName: requestType
        mapping:
          create: '#/components/schemas/DishCreateRequest'
          read: '#/components/schemas/DishReadRequest'
          update: '#/components/schemas/DishUpdateRequest'
          delete: '#/components/schemas/DishDeleteRequest'
          search: '#/components/schemas/DishSearchRequest'
          offers: '#/components/schemas/DishOffersRequest'

    Error:
      type: object
      properties:
        code:
          type: string
        group:
          type: string
        field:
          type: string
        message:
          type: string

    ResponseResult:
      type: string
      enum:
        - success
        - error

    IResponse:
      type: object
      description: Базовый интерфейс для всех ответов
      properties:
        responseType:
          type: string
          description: Поле-дескриминатор для вычисления типа запроса
          example: create
        requestId:
          type: string
          description: Идентификатор запроса для отладки
        result:
          $ref: '#/components/schemas/ResponseResult'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'

      discriminator:
        propertyName: responseType
        mapping:
          create: '#/components/schemas/DishCreateResponse'
          read: '#/components/schemas/DishReadResponse'
          update: '#/components/schemas/DishUpdateResponse'
          delete: '#/components/schemas/DishDeleteResponse'
          search: '#/components/schemas/DishSearchResponse'
          offers: '#/components/schemas/DishOffersResponse'
          init: '#/components/schemas/DishInitResponse'

    UserId:
      type: string
      description: Идентификатор пользователя
    DishId:
      type: string
      description: Идентификатор объявления
    DishLock:
      type: string
      description: Версия оптимистичной блокировки
    ProductId:
      type: string
      description: Идентификатор категории блюда в меню

    BaseDish:
      type: object
      description: Объект описывает свойства, одинаковые для create и update
      properties:
        title:
          type: string
          description: Название блюда
        description:
          type: string
          description: Описание блюда
        price:
          type: string
          description: Стоимость блюда
        image:
          type: string
          description: фото блюда
        visibility:
          $ref: '#/components/schemas/DishVisibility'
        productId:
            $ref: '#/components/schemas/ProductId'


    DishVisibility:
      type: string
      description: 'Тип видимости меню. Возможные значения: видит только владелец, видимо всем'
      enum:
        - ownerOnly
        - public

    DishInitResponse:
      allOf:
        - $ref: '#/components/schemas/IResponse'

    DishCreateObject:
      allOf:
        - $ref: '#/components/schemas/BaseDish'

    DishCreateRequest:
      allOf:
        - $ref: '#/components/schemas/IRequest'
        - $ref: '#/components/schemas/DishRequestDebug'
        - type: object
          properties:
            dish:
              $ref: '#/components/schemas/DishCreateObject'

    DishReadObject:
      allOf:
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/DishId'

    DishReadRequest:
      allOf:
        - $ref: '#/components/schemas/IRequest'
        - $ref: '#/components/schemas/DishRequestDebug'
        - type: object
          properties:
            dish:
              $ref: '#/components/schemas/DishReadObject'

    DishUpdateObject:
      allOf:
        - $ref: '#/components/schemas/BaseDish'
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/DishId'
            lock:
              $ref: '#/components/schemas/DishLock'

    DishUpdateRequest:
      allOf:
        - $ref: '#/components/schemas/IRequest'
        - $ref: '#/components/schemas/DishRequestDebug'
        - type: object
          properties:
            dish:
              $ref: '#/components/schemas/DishUpdateObject'

    DishDeleteObject:
      allOf:
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/DishId'
            lock:
              $ref: '#/components/schemas/DishLock'

    DishDeleteRequest:
      allOf:
        - $ref: '#/components/schemas/IRequest'
        - $ref: '#/components/schemas/DishRequestDebug'
        - type: object
          properties:
            Dish:
              $ref: '#/components/schemas/DishDeleteObject'

    DishSearchFilter:
      type: object
      description: Набор фильтров для поиска
      properties:
        searchString:
          type: string
          description: Поисковая строка, которая будет искаться в названиях и описаниях блюда

    DishSearchRequest:
      allOf:
        - $ref: '#/components/schemas/IRequest'
        - $ref: '#/components/schemas/DishRequestDebug'
        - type: object
          properties:
            DishFilter:
              $ref: '#/components/schemas/DishSearchFilter'

    DishOffersObject:
      $ref: '#/components/schemas/DishReadObject'

    DishOffersRequest:
      allOf:
        - $ref: '#/components/schemas/IRequest'
        - $ref: '#/components/schemas/DishRequestDebug'
        - type: object
          properties:
            dish:
              $ref: '#/components/schemas/DishOffersObject'

    DishResponseObject:
      allOf:
        - $ref: '#/components/schemas/BaseDish'
        - type: object
          description: Объект, который возвращается в ответе бэкенда
          properties:
            id:
              $ref: '#/components/schemas/DishId'
            ownerId:
              $ref: '#/components/schemas/UserId'
            lock:
              $ref: '#/components/schemas/DishLock'
            permissions:
              type: array
              uniqueItems: true
              items:
                $ref: '#/components/schemas/DishPermissions'

    DishPermissions:
      type: string
      description: Доступы для владельца для операций над объявлением
      enum:
        - read
        - update
        - delete
        - makeVisiblePublic
        - makeVisibleOwn

    DishResponseSingle:
      allOf:
        - type: object
          description: Ответ с одним объектом блюда
          properties:
            dish:
              $ref: '#/components/schemas/DishResponseObject'

    DishResponseMulti:
      allOf:
        - type: object
          description: Список найденных блюд
          properties:
            dishes:
              type: array
              items:
                $ref: '#/components/schemas/DishResponseObject'

    DishCreateResponse:
      allOf:
        - $ref: '#/components/schemas/IResponse'
        - $ref: '#/components/schemas/DishResponseSingle'

    DishReadResponse:
      allOf:
        - $ref: '#/components/schemas/IResponse'
        - $ref: '#/components/schemas/DishResponseSingle'

    DishUpdateResponse:
      allOf:
        - $ref: '#/components/schemas/IResponse'
        - $ref: '#/components/schemas/DishResponseSingle'

    DishDeleteResponse:
      allOf:
        - $ref: '#/components/schemas/IResponse'
        - $ref: '#/components/schemas/DishResponseSingle'

    DishSearchResponse:
      allOf:
        - $ref: '#/components/schemas/IResponse'
        - $ref: '#/components/schemas/DishResponseMulti'

    DishOffersResponse:
      allOf:
        - $ref: '#/components/schemas/IResponse'
        - $ref: '#/components/schemas/DishResponseSingle'
        - $ref: '#/components/schemas/DishResponseMulti'

    # STUBS ======================
    DishRequestDebugMode:
      type: string
      enum:
        - prod
        - test
        - stub

    DishRequestDebug:
      type: object
      properties:
        debug:
          $ref: '#/components/schemas/DishDebug'

    DishDebug:
      type: object
      properties:
        mode:
          $ref: '#/components/schemas/DishRequestDebugMode'
        stub:
          $ref: '#/components/schemas/DishRequestDebugStubs'

    DishRequestDebugStubs:
      type: string
      description: Перечисления всех стабов
      enum:
        - success
        - notFound
        - badId
        - badTitle
        - badDescription
        - badPrice
        - badImage
        - badVisibility
        - cannotDelete
        - badSearchString
